name: Deploy Receipt-App to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'receipt-app/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Repository Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. SSH 키 설정
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 3. EC2 서버의 공개 키 등록
      - name: Add known host
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # 4. EC2에 접속하여 애플리케이션 배포
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            set -e  # 오류 발생 시 즉시 종료
            LOG_FILE=~/deployment.log
            APP_LOG_FILE=~/receipt-app.log
            JAR_NAME=receipt-app-0.0.1-SNAPSHOT.jar

            echo "=== Deploying application ===" > $LOG_FILE
            echo "Navigating to application directory..." >> $LOG_FILE
            cd AIML_project/receipt-app || exit 1
            echo "Pulling latest changes from GitHub..." >> $LOG_FILE
            git pull origin main >> $LOG_FILE 2>&1

            echo "Building the application..." >> $LOG_FILE
            ./gradlew build -x test >> $LOG_FILE 2>&1
            BUILD_STATUS=$?
            if [ $BUILD_STATUS -ne 0 ]; then
              echo "Build failed with status $BUILD_STATUS" >> $LOG_FILE
              tail -n 20 $LOG_FILE
              exit 1
            fi
            echo "Build completed successfully." >> $LOG_FILE

            echo "Stopping existing application process..." >> $LOG_FILE
            PIDS=\$(pgrep -f "$JAR_NAME")
            if [ -n "\$PIDS" ]; then
              echo "Existing process found: \$PIDS" >> $LOG_FILE
              kill -9 \$PIDS >> $LOG_FILE 2>&1
              echo "Process \$PIDS killed." >> $LOG_FILE
            else
              echo "No existing process found." >> $LOG_FILE
            fi

            sleep 3
            echo "Starting new application instance..." >> $LOG_FILE
            nohup java -jar build/libs/$JAR_NAME --spring.profiles.active=dev >> $APP_LOG_FILE 2>&1 &
            APP_PID=\$!
            echo "Application started with PID \$APP_PID" >> $LOG_FILE
            sleep 5

            echo "Checking if the application is running..." >> $LOG_FILE
            if ps -p \$APP_PID > /dev/null; then
              echo "Application is running with PID \$APP_PID" >> $LOG_FILE
            else
              echo "Application failed to start." >> $LOG_FILE
              tail -n 20 $APP_LOG_FILE >> $LOG_FILE
              exit 1
            fi

            echo "Deployment completed!" >> $LOG_FILE
            ps aux | grep "$JAR_NAME" >> $LOG_FILE
            echo "Application log (last 20 lines):" >> $LOG_FILE
            tail -n 20 $APP_LOG_FILE >> $LOG_FILE
            cat $LOG_FILE
          EOF
